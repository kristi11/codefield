{
  "_args": [
    [
      {
        "raw": "node-vibrant@^3.0.0-alpha.2",
        "scope": null,
        "escapedName": "node-vibrant",
        "name": "node-vibrant",
        "rawSpec": "^3.0.0-alpha.2",
        "spec": ">=3.0.0-alpha.2 <4.0.0",
        "type": "range"
      },
      "C:\\xampp\\htdocs\\codefield\\node_modules\\image-trace-loader"
    ]
  ],
  "_from": "node-vibrant@>=3.0.0-alpha.2 <4.0.0",
  "_id": "node-vibrant@3.0.0",
  "_inCache": true,
  "_location": "/node-vibrant",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-vibrant-3.0.0.tgz_1511865537108_0.37504566088318825"
  },
  "_npmUser": {
    "name": "akfish",
    "email": "akfish@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-vibrant@^3.0.0-alpha.2",
    "scope": null,
    "escapedName": "node-vibrant",
    "name": "node-vibrant",
    "rawSpec": "^3.0.0-alpha.2",
    "spec": ">=3.0.0-alpha.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/image-trace-loader"
  ],
  "_resolved": "https://registry.npmjs.org/node-vibrant/-/node-vibrant-3.0.0.tgz",
  "_shasum": "3ef4540dea2bdd7680ed181b8b08eaddfe74a568",
  "_shrinkwrap": null,
  "_spec": "node-vibrant@^3.0.0-alpha.2",
  "_where": "C:\\xampp\\htdocs\\codefield\\node_modules\\image-trace-loader",
  "author": {
    "name": "akfish"
  },
  "browser": "lib/browser.js",
  "bugs": {
    "url": "https://github.com/akfish/node-vibrant/issues"
  },
  "dependencies": {
    "@types/bluebird": "^3.0.37",
    "@types/jimp": "^0.2.0",
    "@types/lodash": "^4.14.53",
    "@types/node": "^8.0.53",
    "bluebird": "^3.4.7",
    "jimp": "^0.2.27",
    "lodash": "^4.17.4",
    "url": "^0.11.0"
  },
  "description": "Extract prominent colors from an image. Supports both node and browser environment.",
  "devDependencies": {
    "@types/chai": "^4.0.5",
    "@types/finalhandler": "0.0.32",
    "@types/mocha": "^2.2.39",
    "@types/serve-static": "^1.7.31",
    "@types/table": "^4.0.1",
    "chai": "^4.1.2",
    "finalhandler": "^1.0.0",
    "karma": "^1.5.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-commonjs": "^1.0.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.3.0",
    "karma-webpack": "^2.0.2",
    "mocha": "^4.0.1",
    "rimraf": "^2.6.1",
    "serve-static": "^1.11.2",
    "table": "^4.0.1",
    "ts-loader": "^3.1.1",
    "typescript": "^2.6.1",
    "webpack": "^3.8.1",
    "worker-loader": "^1.1.0"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "integrity": "sha512-3qFLV1ITyC4A7C3BCJaguhw4HjPHAqNLapqJYktMthWYIBmtfhbz9R52bciYYhNabfKMS8gB3uk7grc+la4rww==",
    "shasum": "3ef4540dea2bdd7680ed181b8b08eaddfe74a568",
    "tarball": "https://registry.npmjs.org/node-vibrant/-/node-vibrant-3.0.0.tgz"
  },
  "gitHead": "4548068d5de9072299eb4b2f05245375f2dd6523",
  "homepage": "https://github.com/akfish/node-vibrant#readme",
  "keywords": [
    "color",
    "detection",
    "varation",
    "image",
    "picture",
    "canvas",
    "vibrant",
    "muted",
    "colour"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "akfish",
      "email": "akfish@gmail.com"
    }
  ],
  "name": "node-vibrant",
  "optionalDependencies": {},
  "readme": "# node-vibrant\n[![Build Status](https://travis-ci.org/akfish/node-vibrant.svg?branch=master)](https://travis-ci.org/akfish/node-vibrant)\n\nExtract prominent colors from an image.\n\n## New WebWorker support in v3.0\n\nQuantization is the most time-consuming stage in `node-vibrant`. In v3.0, the quantization can be run in the WebWorker to avoid freezing the UI thread. \n\nHere's how to use this feature:\n1. Use WebWorker build `dist/vibrant.worker.js` or `dist/vibrant.worker.min.js`. Or if you are re-bundling with webpack, use `lib/bundle.worker.js` as entry\n2. Use WebWorker quantizer:\n   ```ts\n   let v = Vibrant.from(src)\n     .useQuantizer(Vibrant.Quantizer.WebWorker)\n     // Other configurations\n   ```\n\n## Features\n- Identical API for both node.js and browser environment\n- Support browserify/webpack\n- Consistent results (*See [Result Consistency](#result-consistency))\n\n## Install\n\n```bash\n$ npm install node-vibrant\n```\n\n## Usage\n### node.js / browserify\n\n```js\n// ES5\nvar Vibrant = require('node-vibrant')\n// ES6\nimport * as Vibrant from 'node-vibrant'\n// TypeScript\nimport Vibrant = require('node-vibrant')\n\n// Using builder\nVibrant.from('path/to/image').getPalette((err, palette) => console.log(palette))\n// Promise\nVibrant.from('path/to/image').getPalette()\n  .then((palette) => console.log(palette))\n\n// Using constructor\nlet v = new Vibrant('path/to/image', opts)\nv.getPalette((err, palette) => console.log(palette))\n// Promise\nv.getPalette().then((palette) => console.log(palette))\n```\n\n### Browser\n\nIf you installed node-vibrant with `npm`, compiled bundles are available under `node_modules/node-vibrant/dist`.\nOr you can download bundles from [Relases](https://github.com/akfish/node-vibrant/releases).\n\n```html\n<!-- Debug version -->\n<script src=\"/path/to/dist/vibrant.js\"></script>\n<!-- Uglified version -->\n<script src=\"/path/to/dist/vibrant.min.js\"></script>\n\n<script>\n  // Use `Vibrant` in script\n  // Vibrant is exported to global. window.Vibrant === Vibrant\n  Vibrant.from('path/to/image').getPalette(function(err, palette) {});\n  // Promise\n  Vibrant.from('path/to/image').getPalette().then(function(palette) {});\n  // Or\n  var v = new Vibrant('/path/to/image', opts);\n  // ... same as in node.js\n</script>\n```\n\n## Contribution Guidelines\n1. Make changes\n2. Write test specs if necessary\n3. Pass tests\n4. Commit **source files only** (without compiled files)\n\n## References\n\n### `Vibrant`\nMain class of `node-vibrant`.\n\n#### `Vibrant.from(src: ImageSource): Builder`\nMake a `Builder` for an image. Returns a `Builder` instance.\n\n#### `constructor(src: ImageSource, opts: Partial<Options>)`\n\nName    |  Description\n------- |  ---------------------------------------\n`image` |  Path to image file (support HTTP/HTTPs)\n`opts`  |  Options (optional)\n\n##### `ImageSource`\n\n```ts\nexport type ImageSource = string \n  | HTMLImageElement  // Browser only \n  | Buffer            // Node.js only\n```\n\n##### `Options`\n\n```ts\nexport interface Options {\n    colorCount: number\n    quality: number\n    maxDimension: number\n    filters: Array<Filter>\n    ImageClass: ImageClass\n    quantizer: Quantizer\n    generator?: Generator\n}\n```\n\nField          | Default                         | Description\n-------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------------------------\n`colorCount`   | 64                              | amount of colors in initial palette from which the swatches will be generated\n`quality`      | 5                               | Scale down factor used in downsampling stage. `1` means no downsampling. If `maxDimension` is set, this value will not be used.\n`maxDimension` | `undefined`                     | The max size of the image's longer side used in downsampling stage. This field will override `quality`.\n`filters`      | `[]`                            | An array of filters\n`ImageClass`   | `Image.Node` or `Image.Browser` | An `Image` implementation class\n`quantizer`    | `Vibrant.Quantizer.MMCQ`        | A `Quantizer` implementation class\n`generator`    | `Vibrant.Generator.Default`     | An `Generator` instance\n\n##### `Resolvable<T>`\n\n```ts\nexport type Resolvable<T> = T | Bluebird<T>\n```\n\n##### `Quantizer`\n\n```ts\nexport interface Quantizer {\n    (pixels: Pixels, opts: Options): Resolvable<Array<Swatch>>\n}\n```\n\n##### `Generator`\n\n```ts\nexport interface Generator {\n    (swatches: Array<Swatch>, opts?: Object): Resolvable<Palette>\n}\n```\n\n\n##### `Filter`\n\nReturns `true` if the color is to be kept.\n\n```ts\nexport interface Filter {\n    (red: number, green: number, blue: number, alpha: number): boolean\n}\n```\n\n#### `getPalette(cb?: Callback<Palette>): Bluebird<Palette>`\n\nName | Description\n---- | -----------------\n`cb` | (Optional) callback function. Can be omitted when using `Promise`.\n\n##### `Callback<T>`\n\n```ts\nexport interface Callback<T> {\n    (err?: Error, result?: T): void\n}\n```\n\n#### `getSwatches(cb?: Callback<Palette>): Bluebird<Palette>`\nAlias of `getPalette`.\n\n### `Vibrant.Builder`\nHelper class for change configurations and create a `Vibrant` instance. Methods of a `Builder` instance can be chained like:\n\n```ts\nVibrant.from(src)\n  .quality(1)\n  .clearFilters()\n  // ...\n  .getPalette()\n  .then((palette) => {})\n```\n\n#### `constructor(src: ImageSource, opts: Partial<Options>)`\nArguments are the same as `Vibrant.constructor`.\n\n#### `quality(q: number): Builder`\nSets `opts.quality` to `q`. Returns this `Builder` instance.\n\n#### `maxColorCount(n: number): Builder`\nSets `opts.colorCount` to `n`. Returns this `Builder` instance.\n\n#### `maxDimension(d: number): Builder`\nSets `opts.maxDimension` to `d`. Returns this `Builder` instance.\n\n#### `addFilter(f: Filter): Builder`\nAdds a filter function. Returns this `Builder` instance.\n\n#### `removeFilter(f: Filter): Builder`\nRemoves a filter function. Returns this `Builder` instance.\n\n#### `clearFilters(): Builder`\nClear all filters. Returns this `Builder` instance.\n\n#### `useImageClass(imageClass: ImageClass): Builder`\nSpecifies which `Image` implementation class to use. Returns this `Builder` instance.\n\n#### `useQuantizer(quantizer: Quantizer): Builder`\nSpecifies which `Quantizer` implementation class to use. Returns this `Builder` instance.\n\n#### `useGenerator(generator: Generator): Builder`\nSets `opts.generator` to `generator`. Returns this `Builder` instance.\n\n#### `build(): Vibrant`\nBuilds and returns a `Vibrant` instance as configured.\n\n#### `getPalette(cb?: Callback<Palette>): Bluebird<Palette>`\nBuilds a `Vibrant` instance as configured and calls its `getPalette` method.\n\n#### `getSwatches(cb? Callback<Palette>): Bluebird<Palette>`\nAlias of `getPalette`.\n\n### `Vibrant.Swatch`\nRepresents a color swatch generated from an image's palette.\n\n#### `Vec3`\n\n```ts\nexport interface Vec3 extends Array<number> {\n    0: number,\n    1: number,\n    2: number\n}\n```\n\n#### `constructor(rgb: Vec3, population: number)`\nInternal use.\n\nName         | Description\n------------ | -----------------------------------\n`rgb`        | `[r, g, b]`\n`population` | Population of the color in an image\n\n#### `getHsl(): Vec3`\n#### `getPopulation(): number`\n#### `getRgb(): Vec3`\n#### `getHex(): string`\n#### `getTitleTextColor(): string`\nReturns an appropriate color to use for any 'body' text which is displayed over this `Swatch`'s color.\n\n#### `getBodyTextColor(): string`\nReturns an appropriate color to use for any 'title' text which is displayed over this `Swatch`'s color.\n\n### `Vibrant.Util`\nUtility methods. Internal usage.\n\n#### `hexToRgb(hex: string): Vec3`\n#### `rgbToHex(r: number, g: number, b: number): string`\n#### `hslToRgb(h: number, s: number, l: number): Vec3`\n#### `rgbToHsl(r: number, g: number, b: number): Vec3`\n#### `xyzToRgb(x: number, y: number, z: number): Vec3`\n#### `rgbToXyz(r: number, g: number, b: number): Vec3`\n#### `xyzToCIELab(x: number, y: number, z: number): Vec3`\n#### `rgbToCIELab(l: number, a: number, b: number): Vec3`\n#### `deltaE94(lab1: number, lab2: number): number`\nComputes CIE delta E 1994 diff between `lab1` and `lab2`. The 2 colors are in CIE-Lab color space. Used in tests to compare 2 colors' perceptual similarity.\n\n#### `rgbDiff(rgb1: Vec3, rgb2: Vec3): number`\nCompute CIE delta E 1994 diff between `rgb1` and `rgb2`.\n\n#### `hexDiff(hex1: string, hex2: string): number`\nCompute CIE delta E 1994 diff between `hex1` and `hex2`.\n\n#### `getColorDiffStatus(d: number): string`\nGets a string to describe the meaning of the color diff. Used in tests.\n\nDelta E  | Perception                             | Returns\n-------- | -------------------------------------- | -----------\n<= 1.0   | Not perceptible by human eyes.         | `\"Perfect\"`\n1 - 2    | Perceptible through close observation. | `\"Close\"`\n2 - 10   | Perceptible at a glance.               | `\"Good\"`\n11 - 49  | Colors are more similar than opposite  | `\"Similar\"`\n50 - 100 | Colors are exact opposite              | `Wrong`\n\n## NPM Tasks\n\nTask            | Description\n--------------- | --------------------------------------\n`build:browser` | Build browser target\n`build:node`    | Build node.js target\n`build`         | Build all targets\n`clean:browser` | Clean browser build\n`clean:node`    | Clean node.js build\n`clean`         | Clean all builds\n`test:browser`  | Run browser specs (karma)\n`test:node`     | Run node.js specs (mocha)\n`test`          | Run all specs\n\n## Notes\n### Intentional Deviation From `vibrant.js`\n- `node-vibrant` takes image path, not the image object as parameter for the obvious reason that node.js environment has no access to HTML DOM object.\n- `node-vibrant` provides asynchronous API since most node.js image processing library is asynchronous. And the original `vibrant.js` workflow is asynchronous any way (though you will have to handle the image loading yourself, while `node-vibrant` does it for you).\n- `node-vibrant` uses one single `opts` object to hold all options for future expansions. And it feels more node.js-like.\n- `node-vibrant` uses method call to initiate image processing instead of constructor so that developers can use it with `Promise`.\n\n### Result Consistency\nThe results is consistent within each user's browser instance regardelss of visible region or display size of the image, unlike the original `vibrant.js` implementation.\n\nHowever, due to the very nature of HTML5 canvas element, image rendering is platform/machine-dependent. Thus the resulting swatches in browser environment varies and may not be the same as in node.js nor in another machine. See [Canvas Fingerprinting](https://en.wikipedia.org/wiki/Canvas_fingerprinting).\n\nThe test specs use CIE delta E 1994 color difference to measure inconsistencies across platforms. It compares the generated color on node.js, Chrome, Firefox and IE11. At `quality` == 1 (no downsampling) and no filters, the results are rather consistent. Color diffs between browsers are mostly not perceptible by human eyes. Downsampling _will_ cause perceptible inconsistent results across browsers due to differences in canvas implementations.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/akfish/node-vibrant.git"
  },
  "scripts": {
    "build": "npm run build:browser && npm run build:node",
    "build:browser": "webpack --config webpack.config.js",
    "build:node": "tsc",
    "clean": "npm run clean:browser && npm run clean:node",
    "clean:browser": "rimraf dist",
    "clean:node": "rimraf lib",
    "prepublish": "npm run clean && npm run build",
    "pretest": "npm run clean && npm run build",
    "test": "npm run test:node && npm run test:browser",
    "test:browser": "karma start karma.conf.js",
    "test:node": "mocha lib/test/**/*.spec.js"
  },
  "types": "lib/index.d.ts",
  "version": "3.0.0"
}
